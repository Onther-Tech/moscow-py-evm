import logging
import pathlib
import json
from pprint import pprint
from scripts.benchmark.utils.chain_plumbing import (
    get_chain,
    FUNDED_ADDRESS,
    FUNDED_ADDRESS_PRIVATE_KEY,
)

from scripts.benchmark.utils.address import (
    generate_random_address,
)

from scripts.benchmark.utils.compile import (
    get_compiled_contract
)

from eth_keys import (
    keys
)

from eth_typing import (
    Address
)

from scripts.benchmark.utils.tx import (
    new_transaction,
)

from eth.vm.forks.byzantium import (
    ByzantiumVM,
)

from eth.vm.message import (
    Message,
)

from eth.chains.base import (
    MiningChain,
)

from web3 import (
    Web3
)

from eth.constants import (
    CREATE_CONTRACT_ADDRESS
)

from eth_utils import (
    encode_hex,
    decode_hex,
    to_int,
)
from eth_bloom import (
    BloomFilter,
)
from eth.vm.transaction_context import (
    BaseTransactionContext
)

from solc import compile_source
from web3.contract import ConciseContract

code = b'`\x80`@R`\x046\x10a\x01\x12W`\x005|\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x04c\xff\xff\xff\xff\x16\x80c\x0e\xbb\x17*\x14a\x01\x17W\x80c\x15V\xd8\xac\x14a\x01BW\x80c\x15\x8e\xf9>\x14a\x01mW\x80c9\x00\xe4\xec\x14a\x01\x9cW\x80c<\xcf\xd6\x0b\x14a\x01\xf3W\x80c[\xe4\xf7e\x14a\x02"W\x80c{\x92\x9c\'\x14a\x03\x10W\x80c\x83\xcd\x9c\xc3\x14a\x03?W\x80c\x85q\x84\xd1\x14a\x03\x9aW\x80c\x8c\xd8\xdb\x8a\x14a\x03\xf1W\x80c\x93z\xae\xf1\x14a\x042W\x80c\x9bNs_\x14a\x04\x89W\x80c\xb6\x9a\xd6;\x14a\x05\x0cW\x80c\xbc\xac\x976\x14a\x05cW\x80c\xc3P\x82\xa9\x14a\x05\xc8W\x80c\xd1\xc0\xc0B\x14a\x06?W\x80c\xd8\x98\xae\x1c\x14a\x06\xa4W\x80c\xda\x95\xeb\xf7\x14a\x06\xfbW\x80c\xe1\xe1X\xa5\x14a\x07`W\x80c\xf3@\xfa\x01\x14a\x07\x8bW[`\x00\x80\xfd[4\x80\x15a\x01#W`\x00\x80\xfd[Pa\x01,a\x07\xd9V[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x01NW`\x00\x80\xfd[Pa\x01Wa\x07\xdfV[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x01yW`\x00\x80\xfd[Pa\x01\x82a\x07\xe5V[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x01\xa8W`\x00\x80\xfd[Pa\x01\xdd`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x07\xf8V[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x01\xffW`\x00\x80\xfd[Pa\x02\x08a\x08AV[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x02.W`\x00\x80\xfd[Pa\x02m`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90\x805\x90` \x01\x90\x92\x91\x90PPPa\x0b\xa2V[`@Q\x80\x85o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x84o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x82\x15\x15\x15\x15\x81R` \x01\x94PPPPP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x03\x1cW`\x00\x80\xfd[Pa\x03%a\rYV[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x03KW`\x00\x80\xfd[Pa\x03\x80`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\rlV[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x03\xa6W`\x00\x80\xfd[Pa\x03\xdb`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x0f=V[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x03\xfdW`\x00\x80\xfd[Pa\x040`\x04\x806\x03\x81\x01\x90\x80\x805\x90` \x01\x90\x92\x91\x90\x805\x90` \x01\x90\x92\x91\x90\x805\x90` \x01\x90\x92\x91\x90PPPa\x0f\x86V[\x00[4\x80\x15a\x04>W`\x00\x80\xfd[Pa\x04s`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x10\x15V[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x04\x95W`\x00\x80\xfd[Pa\x04\xca`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x10^V[`@Q\x80\x82s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x05\x18W`\x00\x80\xfd[Pa\x05M`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x10\xc6V[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x05oW`\x00\x80\xfd[Pa\x05\xae`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90\x805\x90` \x01\x90\x92\x91\x90PPPa\x11\x0fV[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x05\xd4W`\x00\x80\xfd[Pa\x06)`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x14\x0eV[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x06KW`\x00\x80\xfd[Pa\x06\x8a`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90\x805\x90` \x01\x90\x92\x91\x90PPPa\x14\x95V[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x06\xb0W`\x00\x80\xfd[Pa\x06\xe5`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x15\x8dV[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x07\x07W`\x00\x80\xfd[Pa\x07F`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90\x805\x90` \x01\x90\x92\x91\x90PPPa\x15\xd9V[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[4\x80\x15a\x07lW`\x00\x80\xfd[Pa\x07ua\x1aXV[`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[a\x07\xbf`\x04\x806\x03\x81\x01\x90\x80\x805s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90` \x01\x90\x92\x91\x90PPPa\x1a^V[`@Q\x80\x82\x15\x15\x15\x15\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xf3[`\x0bT\x81V[`\nT\x81V[`\x08`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x81V[`\x00`\x01`\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x91\x90PV[`\x00\x80`\x00\x80`\x00\x80`\x05`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x94P`\x00\x85\x80T\x90P\x11\x15\x15a\x08\x9eW`\x00\x80\xfd[`\x06`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x93P`\x00\x84\x14\x80\x15a\t\x1bWP\x84`\x00\x81T\x81\x10\x15\x15a\x08\xfaW\xfe[\x90`\x00R` `\x00 \x90`\x02\x02\x01`\x01\x01`\x14\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15[\x15a\t)W`\x00\x92Pa\tWV[`\x00\x84\x14\x15a\tOW`\x02\x85\x80T\x90P\x10\x15\x15\x15a\tFW`\x00\x80\xfd[`\x01\x92Pa\tVV[`\x01\x84\x01\x92P[[\x84\x80T\x90P\x83\x10\x15\x15a\tiW`\x00\x80\xfd[`\x05`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x83\x81T\x81\x10\x15\x15a\t\xb5W\xfe[\x90`\x00R` `\x00 \x90`\x02\x02\x01\x91P\x81`\x01\x01`\x14\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15\x15\x15a\t\xe3W`\x00\x80\xfd[C`\x0bT\x83`\x00\x01`\x10\x90T\x90a\x01\x00\n\x90\x04o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x01\x11\x15\x15\x15a\n(W`\x00\x80\xfd[\x81`\x00\x01`\x00\x90T\x90a\x01\x00\n\x90\x04o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90P`\x01\x82`\x01\x01`\x14a\x01\x00\n\x81T\x81`\xff\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UP\x82`\x06`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP3s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16a\x08\xfc\x82\x90\x81\x15\x02\x90`@Q`\x00`@Q\x80\x83\x03\x81\x85\x88\x88\xf1\x93PPPP\x15\x80\x15a\x0b\x04W=`\x00\x80>=`\x00\xfd[P\x81`\x01\x01`\x00\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x163s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x7f\x91\xfb\x9d\x98\xb7\x86\xc5}t\xc0\x99\xcc\xd2\xbe\xca\x179\xe9\xf6\xa8\x1f\xb4\x90\x01\xcaF\\Ku\x91\xbb\xe2\x83\x86`@Q\x80\x83\x81R` \x01\x82\x81R` \x01\x92PPP`@Q\x80\x91\x03\x90\xa3`\x01\x95PPPPPP\x90V[`\x00\x80`\x00\x80a\x0b\xb0a\x1d\xd0V[a\x0b\xb9\x87a\x15\x8dV[\x86\x10\x15\x15a\x0b\xc6W`\x00\x80\xfd[`\x05`\x00\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x86\x81T\x81\x10\x15\x15a\x0c\x12W\xfe[\x90`\x00R` `\x00 \x90`\x02\x02\x01`\x80`@Q\x90\x81\x01`@R\x90\x81`\x00\x82\x01`\x00\x90T\x90a\x01\x00\n\x90\x04o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01`\x00\x82\x01`\x10\x90T\x90a\x01\x00\n\x90\x04o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01`\x01\x82\x01`\x00\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01`\x01\x82\x01`\x14\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15\x15\x15\x15\x81RPP\x90P\x80`\x00\x01Q\x94P\x80` \x01Q\x93P\x80`@\x01Q\x92P\x80``\x01Q\x91PP\x92\x95\x91\x94P\x92PV[`\x0c`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x81V[`\x00\x80`\x08`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15\x15a\r\x8aW`\x00\x80\xfd[`\x00\x80\x84s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90P3`\x00\x80\x85s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00a\x01\x00\n\x81T\x81s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UP\x7fX\x84\xd7\xe3\xec\x12=\xe8\xe7r\xbc\xf5v\xc1\x8d\xcd\xadu\xb0V\xc41O\x99\x9e\xd9fi4\x19\xc6\x92\x83\x823`@Q\x80\x84s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x82s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x93PPPP`@Q\x80\x91\x03\x90\xa1`\x01\x91PP\x91\x90PV[`\x00`\x02`\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x91\x90PV[`\x08`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15\x15\x15a\x0f\xa2W`\x00\x80\xfd[`\x00\x83\x11\x15\x15a\x0f\xb1W`\x00\x80\xfd[`\x00\x82\x11\x15\x15a\x0f\xc0W`\x00\x80\xfd[`\x00\x81\x11\x15\x15a\x0f\xcfW`\x00\x80\xfd[\x80`\x02\x83\x02\x10\x15\x15a\x0f\xe0W`\x00\x80\xfd[\x82`\t\x81\x90UP\x81`\n\x81\x90UP\x80`\x0b\x81\x90UP`\x01`\x08`\x00a\x01\x00\n\x81T\x81`\xff\x02\x19\x16\x90\x83\x15\x15\x02\x17\x90UPPPPV[`\x00`\x04`\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x91\x90PV[`\x00\x80`\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x90T\x90a\x01\x00\n\x90\x04s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x90P\x91\x90PV[`\x00`\x07`\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x91\x90PV[`\x00\x80`\x00\x80`\x0c`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x80a\x11\\WP`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x163s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x14[\x15\x15a\x11gW`\x00\x80\xfd[C`\nT`\x04`\x00\x89s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x01\x11\x15\x15a\x12\xd1W`\x02`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T`\x01`\x00\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UPC`\x04`\x00\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP`\x01`\x07`\x00\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x82\x82T\x01\x92PP\x81\x90UP`\x01\x93Pa\x14\x05V[`\x02`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x92P`\x01`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x91P\x81\x85\x83\x01\x11\x15\x15a\x13eW`\x00\x80\xfd[\x84\x82\x01\x90P\x82\x81\x11\x15a\x13\xbbW\x82`\x01`\x00\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UPa\x14\x00V[\x80`\x01`\x00\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP[`\x01\x93P[PPP\x92\x91PPV[`\x00`\x03`\x00\x84s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x92\x91PPV[`\x00\x80`\x0c`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x80a\x14\xdfWP`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x163s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x14[\x15\x15a\x14\xeaW`\x00\x80\xfd[`\x01`\x00\x85s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x80\x83\x82\x03\x10\x15\x15a\x15<W`\x00\x80\xfd[\x82\x81\x03`\x01`\x00\x86s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP`\x01\x91PP\x92\x91PPV[`\x00`\x05`\x00\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x80T\x90P\x90P\x91\x90PV[`\x00\x80`\x00\x80`\x00\x80`\x00`\x08`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15\x15a\x15\xffW`\x00\x80\xfd[`\x00\x88\x11\x15\x15a\x16\x0eW`\x00\x80\xfd[`\x02`\x00\x8as\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x95P`\x03`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x8as\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x94P`\x01`\x00\x8as\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x93P`\x00\x85\x11\x15\x15a\x17 W`\x00\x80\xfd[\x85\x88\x87\x03\x10\x15\x15a\x170W`\x00\x80\xfd[\x84\x88\x86\x03\x10\x15\x15a\x17@W`\x00\x80\xfd[\x87\x86\x03`\x02`\x00\x8bs\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP\x87\x85\x03`\x03`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x8bs\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP\x87\x84\x11\x15a\x18\\W\x87\x84\x03`\x01`\x00\x8bs\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UPa\x18\xa2V[`\x00`\x01`\x00\x8bs\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP[`\x05`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x92P\x82\x80T\x90P\x91P\x82\x83\x80T\x80\x91\x90`\x01\x01a\x18\xfe\x91\x90a\x1e5V[\x81T\x81\x10\x15\x15a\x19\nW\xfe[\x90`\x00R` `\x00 \x90`\x02\x02\x01\x90P\x87\x81`\x00\x01`\x00a\x01\x00\n\x81T\x81o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UPC\x81`\x00\x01`\x10a\x01\x00\n\x81T\x81o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UP\x88\x81`\x01\x01`\x00a\x01\x00\n\x81T\x81s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90\x83s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x02\x17\x90UP\x88s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x163s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x7f:\xeb\x15\xafaX\x8a9\xbc\xfa\xfb\x19\xed\x851@\xd1\x95\xc2\xa9$Sz\xfb\xf9\xa6\xd0CH\xe7ji\x8aC\x86`@Q\x80\x84\x81R` \x01\x83\x81R` \x01\x82\x81R` \x01\x93PPPP`@Q\x80\x91\x03\x90\xa3`\x01\x96PPPPPPP\x92\x91PPV[`\tT\x81V[`\x00\x80`\x00\x80`\x08`\x00\x90T\x90a\x01\x00\n\x90\x04`\xff\x16\x15\x15a\x1a\x7fW`\x00\x80\xfd[`\tT4\x10\x15\x15\x15a\x1a\x90W`\x00\x80\xfd[`\x02`\x00\x86s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x92P`\x03`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x86s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x91P`\x01`\x00\x86s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x90P\x824\x84\x01\x11\x15\x15a\x1b\xa3W`\x00\x80\xfd[\x814\x83\x01\x11\x15\x15a\x1b\xb3W`\x00\x80\xfd[\x804\x82\x01\x11\x15\x15a\x1b\xc3W`\x00\x80\xfd[4\x83\x01`\x02`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP4\x82\x01`\x03`\x003s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 `\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP4\x81\x01`\x01`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP`\x00`\x04`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 T\x14\x15a\x1d_WC`\x04`\x00\x87s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01\x90\x81R` \x01`\x00 \x81\x90UP[\x84s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x163s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x7f\x87R\xa4r\xe5q\xa8\x16\xae\xa9.\xec\x8d\xae\x9b\xafb\x8e\x84\x0fI)\xfb\xcc-\x15^b3\xffh\xa74`@Q\x80\x82\x81R` \x01\x91PP`@Q\x80\x91\x03\x90\xa3`\x01\x93PPPP\x91\x90PV[`\x80`@Q\x90\x81\x01`@R\x80`\x00o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01`\x00o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01`\x00s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x16\x81R` \x01`\x00\x15\x15\x81RP\x90V[\x81T\x81\x83U\x81\x81\x11\x15a\x1ebW`\x02\x02\x81`\x02\x02\x83`\x00R` `\x00 \x91\x82\x01\x91\x01a\x1ea\x91\x90a\x1egV[[PPPV[a\x1f\x04\x91\x90[\x80\x82\x11\x15a\x1f\x00W`\x00\x80\x82\x01`\x00a\x01\x00\n\x81T\x90o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90U`\x00\x82\x01`\x10a\x01\x00\n\x81T\x90o\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90U`\x01\x82\x01`\x00a\x01\x00\n\x81T\x90s\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\x19\x16\x90U`\x01\x82\x01`\x14a\x01\x00\n\x81T\x90`\xff\x02\x19\x16\x90UP`\x02\x01a\x1emV[P\x90V[\x90V\x00\xa1ebzzr0X \xd1\xc5_\xd1\xf7!I\x9c\xca\xa5\x0b"\xa7\xee@.y\x05E\xa0B#\xd6\xc2\x1a\x98\x8d\xc8&\xb4\xfaz\x00)'

contract_source_code = '''
pragma solidity ^0.4.24;


contract Stamina {
  struct Withdrawal {
    uint128 amount;
    uint128 requestBlockNumber;
    address delegatee;
    bool processed;
  }

  /**
   * Internal States
   */
  // delegatee of `delegator` account
  // `delegator` => `delegatee`
  mapping (address => address) _delegatee;

  // stamina of delegatee
  // `delegatee` => `stamina`
  mapping (address => uint) _stamina;

  // total deposit of delegatee
  // `delegatee` => `total deposit`
  mapping (address => uint) _total_deposit;

  // deposit of delegatee
  // `depositor` => `delegatee` => `deposit`
  mapping (address => mapping (address => uint)) _deposit;

  // last recovery block of delegatee
  mapping (address => uint256) _last_recovery_block;

  // depositor => [index] => Withdrawal
  mapping (address => Withdrawal[]) _withdrawal;
  mapping (address => uint256) _last_processed_withdrawal;
  mapping (address => uint) _num_recovery;

  /**
   * Public States
   */
  bool public initialized;

  uint public MIN_DEPOSIT;
  uint public RECOVER_EPOCH_LENGTH; // stamina is recovered when block number % RECOVER_DELAY == 0
  uint public WITHDRAWAL_DELAY;     // Refund will be made WITHDRAWAL_DELAY blocks after depositor request Withdrawal.
                                    // WITHDRAWAL_DELAY prevents immediate withdrawal.
                                    // RECOVER_EPOCH_LENGTH * 2 < WITHDRAWAL_DELAY


  bool public development = true;   // if the contract is inserted directly into
                                    // genesis block, it will be false

  /**
   * Modifiers
   */
  modifier onlyChain() {
    require(development || msg.sender == address(0));
    _;
  }

  modifier onlyInitialized() {
    require(initialized);
    _;
  }

  /**
   * Events
   */
  event Deposited(address indexed depositor, address indexed delegatee, uint amount);
  event DelegateeChanged(address delegator, address oldDelegatee, address newDelegatee);
  event WithdrawalRequested(address indexed depositor, address indexed delegatee, uint amount, uint requestBlockNumber, uint withdrawalIndex);
  event Withdrawn(address indexed depositor, address indexed delegatee, uint amount, uint withdrawalIndex);

  /**
   * Init
   */
  function init(uint minDeposit, uint recoveryEpochLength, uint withdrawalDelay) external {
    require(!initialized);

    require(minDeposit > 0);
    require(recoveryEpochLength > 0);
    require(withdrawalDelay > 0);

    require(recoveryEpochLength * 2 < withdrawalDelay);

    MIN_DEPOSIT = minDeposit;
    RECOVER_EPOCH_LENGTH = recoveryEpochLength;
    WITHDRAWAL_DELAY = withdrawalDelay;

    initialized = true;
  }

  /**
   * Getters
   */
  function getDelegatee(address delegator) public view returns (address) {
    return _delegatee[delegator];
  }

  function getStamina(address addr) public view returns (uint) {
    return _stamina[addr];
  }

  function getTotalDeposit(address delegatee) public view returns (uint) {
    return _total_deposit[delegatee];
  }

  function getDeposit(address depositor, address delegatee) public view returns (uint) {
    return _deposit[depositor][delegatee];
  }

  function getNumWithdrawals(address depositor) public view returns (uint) {
    return _withdrawal[depositor].length;
  }

  function getLastRecoveryBlock(address delegatee) public view returns (uint) {
    return _last_recovery_block[delegatee];
  }

  function getNumRecovery(address delegatee) public view returns (uint) {
    return _num_recovery[delegatee];
  }

  function getWithdrawal(address depositor, uint withdrawalIndex)
    public
    view
    returns (uint128 amount, uint128 requestBlockNumber, address delegatee, bool processed)
  {
    require(withdrawalIndex < getNumWithdrawals(depositor));

    Withdrawal memory w = _withdrawal[depositor][withdrawalIndex];

    amount = w.amount;
    requestBlockNumber = w.requestBlockNumber;
    delegatee = w.delegatee;
    processed = w.processed;
  }

  /**
   * Setters
   */
  /// @notice Set `msg.sender` as delegatee of `delegator`
  function setDelegator(address delegator)
    external
    onlyInitialized
    returns (bool)
  {
    address oldDelegatee = _delegatee[delegator];

    _delegatee[delegator] = msg.sender;

    emit DelegateeChanged(delegator, oldDelegatee, msg.sender);
    return true;
  }

  /**
   * Deposit / Withdraw
   */
  /// @notice Deposit Ether to delegatee
  function deposit(address delegatee)
    external
    payable
    onlyInitialized
    returns (bool)
  {
    require(msg.value >= MIN_DEPOSIT);

    uint totalDeposit = _total_deposit[delegatee];
    uint deposit = _deposit[msg.sender][delegatee];
    uint stamina = _stamina[delegatee];

    // check overflow
    require(totalDeposit + msg.value > totalDeposit);
    require(deposit + msg.value > deposit);
    require(stamina + msg.value > stamina);

    _total_deposit[delegatee] = totalDeposit + msg.value;
    _deposit[msg.sender][delegatee] = deposit + msg.value;
    _stamina[delegatee] = stamina + msg.value;

    if (_last_recovery_block[delegatee] == 0) {
      _last_recovery_block[delegatee] = block.number;
    }

    emit Deposited(msg.sender, delegatee, msg.value);
    return true;
  }

  /// @notice Request to withdraw deposit of delegatee. Ether can be withdrawn
  ///         after WITHDRAWAL_DELAY blocks
  function requestWithdrawal(address delegatee, uint amount)
    external
    onlyInitialized
    returns (bool)
  {
    require(amount > 0);

    uint totalDeposit = _total_deposit[delegatee];
    uint deposit = _deposit[msg.sender][delegatee];
    uint stamina = _stamina[delegatee];

    require(deposit > 0);

    // check underflow
    require(totalDeposit - amount < totalDeposit);
    require(deposit - amount < deposit); // this guarentees deposit >= amount

    _total_deposit[delegatee] = totalDeposit - amount;
    _deposit[msg.sender][delegatee] = deposit - amount;

    // NOTE: Is it right to accept the request when stamina < amount?
    if (stamina > amount) {
      _stamina[delegatee] = stamina - amount;
    } else {
      _stamina[delegatee] = 0;
    }

    Withdrawal[] storage withdrawals = _withdrawal[msg.sender];

    uint withdrawalIndex = withdrawals.length;
    Withdrawal storage withdrawal = withdrawals[withdrawals.length++];

    withdrawal.amount = uint128(amount);
    withdrawal.requestBlockNumber = uint128(block.number);
    withdrawal.delegatee = delegatee;

    emit WithdrawalRequested(msg.sender, delegatee, amount, block.number, withdrawalIndex);
    return true;
  }

  /// @notice Process last unprocessed withdrawal request.
  function withdraw() external returns (bool) {
    Withdrawal[] storage withdrawals = _withdrawal[msg.sender];
    require(withdrawals.length > 0);

    uint lastWithdrawalIndex = _last_processed_withdrawal[msg.sender];
    uint withdrawalIndex;

    if (lastWithdrawalIndex == 0 && !withdrawals[0].processed) {
      withdrawalIndex = 0;
    } else if (lastWithdrawalIndex == 0) { // lastWithdrawalIndex == 0 && withdrawals[0].processed
      require(withdrawals.length >= 2);

      withdrawalIndex = 1;
    } else {
      withdrawalIndex = lastWithdrawalIndex + 1;
    }

    // check out of index
    require(withdrawalIndex < withdrawals.length);

    Withdrawal storage withdrawal = _withdrawal[msg.sender][withdrawalIndex];

    // check withdrawal condition
    require(!withdrawal.processed);
    require(withdrawal.requestBlockNumber + WITHDRAWAL_DELAY <= block.number);

    uint amount = uint(withdrawal.amount);

    // update state
    withdrawal.processed = true;
    _last_processed_withdrawal[msg.sender] = withdrawalIndex;

    // tranfser ether to depositor
    msg.sender.transfer(amount);
    emit Withdrawn(msg.sender, withdrawal.delegatee, amount, withdrawalIndex);

    return true;
  }

  /**
   * Stamina modification (only blockchain)
   * No event emitted during these functions.
   */
  /// @notice Add stamina of delegatee. The upper bound of stamina is total deposit of delegatee.
  ///         addStamina is called when remaining gas is refunded. So we can recover stamina
  ///         if RECOVER_EPOCH_LENGTH blocks are passed.
  function addStamina(address delegatee, uint amount) external onlyChain returns (bool) {
    // if enough blocks has passed since the last recovery, recover whole used stamina.
    if (_last_recovery_block[delegatee] + RECOVER_EPOCH_LENGTH <= block.number) {
      _stamina[delegatee] = _total_deposit[delegatee];
      _last_recovery_block[delegatee] = block.number;
      _num_recovery[delegatee] += 1;

      return true;
    }

    uint totalDeposit = _total_deposit[delegatee];
    uint stamina = _stamina[delegatee];

    require(stamina + amount > stamina);
    uint targetBalance = stamina + amount;

    if (targetBalance > totalDeposit) _stamina[delegatee] = totalDeposit;
    else _stamina[delegatee] = targetBalance;

    return true;
  }

  /// @notice Subtract stamina of delegatee.
  function subtractStamina(address delegatee, uint amount) external onlyChain returns (bool) {
    uint stamina = _stamina[delegatee];

    require(stamina - amount < stamina);
    _stamina[delegatee] = stamina - amount;
    return true;
  }
}
'''

DEFAULT_GAS_LIMIT = 260000
W3_TX_DEFAULTS = {'gas': 0, 'gasPrice': 0}

w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:30303"))

compiled_sol = compile_source(contract_source_code) # Compiled source code
contract_interface = compiled_sol['<stdin>:Stamina']
stamina_address = Web3.toChecksumAddress('0x000000000000000000000000000000000000dead')
stamina = w3.eth.contract(
    address=decode_hex(stamina_address),
    abi=contract_interface['abi']
)

# same as FUNDED_ADDRESS_PRIVATE_KEY
delegatee_private_key = keys.PrivateKey(decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8'))
delegator_private_key = keys.PrivateKey(decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d0'))

delegatee = Address(delegatee_private_key.public_key.to_canonical_address())
delegator = Address(delegator_private_key.public_key.to_canonical_address())

def run() -> None:
    # get Byzantium VM
    chain = get_chain(ByzantiumVM)
    init_function(decode_hex(stamina_address), chain)
    # initialized_function(decode_hex(stamina_address), chain)
    deposit_function(decode_hex(stamina_address), chain)
    set_delegator_function(decode_hex(stamina_address), chain)
    # get_delegatee_function(decode_hex(stamina_address), chain)
    get_stamina_function(decode_hex(stamina_address), chain)
    # get_stamina_function(decode_hex(stamina_address), chain)
    # substract_stamina_function(decode_hex(stamina_address), chain)
    # get_stamina_function(decode_hex(stamina_address), chain)

def init_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.init(10, 20, 50).buildTransaction(W3_TX_DEFAULTS)

    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=delegator_private_key,
        from_=delegator,
        to=addr,
        amount=0,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)

    assert computation.is_success

def initialized_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.initialized().buildTransaction(W3_TX_DEFAULTS)

    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=delegator_private_key,
        from_=delegator,
        to=addr,
        amount=0,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)

    assert computation.is_success
    assert to_int(computation.output) == 1

def deposit_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.deposit(delegatee).buildTransaction(W3_TX_DEFAULTS)

    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=delegator_private_key,
        from_=delegator,
        to=addr,
        amount=100000000000000000000000000,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)

    assert computation.is_success
    assert to_int(computation.output) == 1

def set_delegator_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.setDelegator(delegator).buildTransaction(W3_TX_DEFAULTS)
    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=FUNDED_ADDRESS_PRIVATE_KEY,
        from_=delegatee,
        to=addr,
        amount=0,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)

    assert computation.is_success
    assert to_int(computation.output) == 1

def get_delegatee_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.getDelegatee(delegator).buildTransaction(W3_TX_DEFAULTS)

    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=delegator_private_key,
        from_=delegator,
        to=addr,
        amount=0,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)
    print(computation.output)
    assert computation.is_success

def get_stamina_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.getStamina(delegatee).buildTransaction(W3_TX_DEFAULTS)

    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=delegator_private_key,
        from_=delegator,
        to=addr,
        amount=0,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)
    assert computation.is_success
    print(int(encode_hex(computation.output), 0))

def substract_stamina_function(addr: str, chain: MiningChain) -> None:
    w3_tx = stamina.functions.subtractStamina(delegatee, 10).buildTransaction(W3_TX_DEFAULTS)

    vm_state = chain.get_vm().state
    contract_address = None
    transaction_context = vm_state.get_transaction_context_class()(
        gas_price=0,
        origin=b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\xad',
    )

    # TODO: gas, sender
    message = Message(
        gas=DEFAULT_GAS_LIMIT,
        to=addr,
        sender=b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
        value=0,
        data=decode_hex(w3_tx['data']),
        code=code,
        create_address=contract_address,
    )

    computation = vm_state.get_computation(
        message,
        transaction_context).apply_message()

    assert computation.is_success

    w3_tx = stamina.functions.getStamina(delegatee).buildTransaction(W3_TX_DEFAULTS)

    tx = new_transaction(
        vm=chain.get_vm(),
        private_key=FUNDED_ADDRESS_PRIVATE_KEY,
        from_=FUNDED_ADDRESS,
        to=addr,
        amount=0,
        gas=DEFAULT_GAS_LIMIT,
        data=decode_hex(w3_tx['data']),
    )

    block, receipt, computation = chain.apply_transaction(tx)

    assert computation.is_success


if __name__ == '__main__':
    run()
