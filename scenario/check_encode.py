from eth_keys import keys
from eth_utils import (
    encode_hex,
    decode_hex,
)
from eth_typing import Address

from eth.consensus.pow import mine_pow_nonce
from eth import constants, chains
from eth.vm.forks.byzantium import ByzantiumVM
from eth.db.backends.memory import MemoryDB
from eth_hash.auto import (
    keccak,
)
from eth_abi import(
    encode_single,
)

GENESIS_PARAMS = {
    'parent_hash': constants.GENESIS_PARENT_HASH,
    'uncles_hash': constants.EMPTY_UNCLE_HASH,
    'coinbase': constants.ZERO_ADDRESS,
    'transaction_root': constants.BLANK_ROOT_HASH,
    'receipt_root': constants.BLANK_ROOT_HASH,
    'difficulty': 1,
    'block_number': constants.GENESIS_BLOCK_NUMBER,
    'gas_limit': constants.GENESIS_GAS_LIMIT,
    'timestamp': 1514764800,
    'extra_data': constants.GENESIS_EXTRA_DATA,
    'nonce': constants.GENESIS_NONCE
}

ADDRESS_1_PRIVATE_KEY = keys.PrivateKey(
    decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8')
)
ADDRESS_2_PRIVATE_KEY = keys.PrivateKey(
    decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d0')
)

ADDRESS_1 = Address(ADDRESS_1_PRIVATE_KEY.public_key.to_canonical_address())
ADDRESS_2 = Address(ADDRESS_2_PRIVATE_KEY.public_key.to_canonical_address())

BLOCKCHAIN = Address(b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a')
STAMINA =  Address(b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02')

GENESIS_STATE = {
    ADDRESS_1: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    ADDRESS_2: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    STAMINA: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" :
        b'0x608060405261dead60045534801561001657600080fd5b506107c3806100266000396000f3006080604052600436106100cf5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663158ef93e81146100d45780633900e4ec146100fd57806362eb5d9814610142578063857184d11461017757806392d0d153146101aa5780639b4e735f146101bf578063b7b0422d1461020e578063bcac973614610238578063c35082a914610271578063d1c0c042146102ac578063e1e158a5146102e5578063e842a64b146102fa578063f340fa011461032d578063f3fef3a314610353575b600080fd5b3480156100e057600080fd5b506100e961038c565b604080519115158252519081900360200190f35b34801561010957600080fd5b506101306004803603602081101561012057600080fd5b5035600160a060020a0316610395565b60408051918252519081900360200190f35b34801561014e57600080fd5b506101756004803603602081101561016557600080fd5b5035600160a060020a03166103b0565b005b34801561018357600080fd5b506101306004803603602081101561019a57600080fd5b5035600160a060020a03166103d6565b3480156101b657600080fd5b506101306103f1565b3480156101cb57600080fd5b506101f2600480360360208110156101e257600080fd5b5035600160a060020a03166103f7565b60408051600160a060020a039092168252519081900360200190f35b34801561021a57600080fd5b506101756004803603602081101561023157600080fd5b5035610415565b34801561024457600080fd5b506100e96004803603604081101561025b57600080fd5b50600160a060020a038135169060200135610437565b34801561027d57600080fd5b506101306004803603604081101561029457600080fd5b50600160a060020a03813581169160200135166104bc565b3480156102b857600080fd5b506100e9600480360360408110156102cf57600080fd5b50600160a060020a0381351690602001356104e7565b3480156102f157600080fd5b50610130610536565b34801561030657600080fd5b506100e96004803603602081101561031d57600080fd5b5035600160a060020a031661053c565b6100e96004803603602081101561034357600080fd5b5035600160a060020a03166105c5565b34801561035f57600080fd5b506100e96004803603604081101561037657600080fd5b50600160a060020a03813516906020013561069a565b60055460ff1681565b600160a060020a031660009081526001602052604090205490565b600160a060020a0316600090815260026020908152604080832054600190925290912055565b600160a060020a031660009081526002602052604090205490565b60045481565b600160a060020a039081166000908152602081905260409020541690565b60055460ff161561042557600080fd5b6006556005805460ff19166001179055565b600160a060020a0382166000908152600260209081526040808320546001909252822054838101811061046957600080fd5b8084018281111561049457600160a060020a03861660009081526001602052604090208390556104b0565b600160a060020a03861660009081526001602052604090208190555b50600195945050505050565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600160a060020a038216600090815260016020526040812054828103811161050e57600080fd5b600160a060020a03939093166000908152600160208190526040909120929093039091555090565b60065481565b600160a060020a03808216600081815260208181526040808320805473ffffffffffffffffffffffffffffffffffffffff1981163390811790925582519586529095169184018290528381019490945292519092917f5884d7e3ec123de8e772bcf576c18dcdad75b056c4314f999ed966693419c692919081900360600190a150600192915050565b6006546000903410156105d757600080fd5b600160a060020a0382166000818152600260209081526040808320543384526003835281842094845293909152902054348201821061061557600080fd5b348101811061062357600080fd5b600160a060020a03841660008181526002602090815260408083203487810190915533808552600384528285208686528452938290208682019055815190815290517f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7929181900390910190a35060019392505050565b600160a060020a038216600081815260026020908152604080832054338452600383528184209484529390915281205490919083820382116106db57600080fd5b83810381116106e957600080fd5b600160a060020a0385166000818152600260209081526040808320888703905533808452600383528184209484529390915280822087850390555186156108fc0291879190818181858888f1935050505015801561074b573d6000803e3d6000fd5b50604080518581529051600160a060020a0387169133917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb9181900360200190a35060019493505050505600a165627a7a72305820a011f3b07b2d2070faaf83531209f631ad3e33cd6aa2a5012e67d91316a8ef4d0029',
        "storage" : {}
    }
}

klass = chains.base.MiningChain.configure(
    __name__='TestChain',
    vm_configuration=(
        (constants.GENESIS_BLOCK_NUMBER, ByzantiumVM),
    ))

chain = klass.from_genesis(MemoryDB(), GENESIS_PARAMS, GENESIS_STATE)

######### TX1 ###########################
# init
vm = chain.get_vm()

fdata = keccak("init(uint256)".encode())
fnsig = fdata[0:4]
adata = encode_single('uint256', 1000000000000000000)
data = fnsig + adata
data = data

nonce = vm.state.account_db.get_nonce(ADDRESS_1)
tx1 = vm.create_unsigned_transaction(
    nonce=nonce,
    gas_price=100,
    gas=100000,
    to=STAMINA,
    value=0,
    data=data,
)
print("fdata: ", encode_hex(fdata))
print("fnsig: ", encode_hex(fnsig))
print("adata: ", encode_hex(adata))
print("data: ", encode_hex(data))

signed_tx1 = tx1.as_signed_transaction(ADDRESS_1_PRIVATE_KEY)

new_header, receipt, computation = chain.apply_transaction(signed_tx1)

print("is_success?: ", computation.is_success)
print("receipt: ", receipt)

# We have to finalize the block first in order to be able read the
# attributes that are important for the PoW algorithm
block = chain.get_vm().finalize_block(chain.get_block())

# based on mining_hash, block number and difficulty we can perform
# the actual Proof of Work (PoW) mechanism to mine the correct
# nonce and mix_hash for this block
nonce, mix_hash = mine_pow_nonce(
    block.number,
    block.header.mining_hash,
    block.header.difficulty)

block = chain.mine_block(mix_hash=mix_hash, nonce=nonce)
vm = chain.get_vm()

print("BLOCK1 ADDRESS_1 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_1)))
print("BLOCK1 ADDRESS_2 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_2)))
print("-----------------------")
