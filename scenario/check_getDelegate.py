from eth_keys import keys
from eth_utils import (
    encode_hex,
    decode_hex,
)
from eth_typing import Address

from eth.consensus.pow import mine_pow_nonce
from eth import constants, chains
from eth.vm.forks.byzantium import ByzantiumVM
from eth.db.backends.memory import MemoryDB
from eth_hash.auto import (
    keccak,
)
from eth_abi import(
    encode_single,
)
from eth.utils.address import (
    force_bytes_to_address,
)
from eth.vm.stamina import getDelegate

from scripts.stamina import(
    _deploy_stamina
)
from eth.constants import (
    CREATE_CONTRACT_ADDRESS
)
from web3 import (
    Web3
)
from scripts.benchmark.utils.tx import (
    new_transaction,
)

GENESIS_PARAMS = {
    'parent_hash': constants.GENESIS_PARENT_HASH,
    'uncles_hash': constants.EMPTY_UNCLE_HASH,
    'coinbase': constants.ZERO_ADDRESS,
    'transaction_root': constants.BLANK_ROOT_HASH,
    'receipt_root': constants.BLANK_ROOT_HASH,
    'difficulty': 1,
    'block_number': constants.GENESIS_BLOCK_NUMBER,
    'gas_limit': constants.GENESIS_GAS_LIMIT,
    'timestamp': 1514764800,
    'extra_data': constants.GENESIS_EXTRA_DATA,
    'nonce': constants.GENESIS_NONCE
}

ADDRESS_1_PRIVATE_KEY = keys.PrivateKey(
    decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8')
)
ADDRESS_2_PRIVATE_KEY = keys.PrivateKey(
    decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d0')
)
ADDRESS_3_PRIVATE_KEY = keys.PrivateKey(
    decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d1')
)
ADDRESS_4_PRIVATE_KEY = keys.PrivateKey(
    decode_hex('0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d2')
)

ADDRESS_1 = Address(ADDRESS_1_PRIVATE_KEY.public_key.to_canonical_address())
ADDRESS_2 = Address(ADDRESS_2_PRIVATE_KEY.public_key.to_canonical_address())
ADDRESS_3 = Address(ADDRESS_3_PRIVATE_KEY.public_key.to_canonical_address())
ADDRESS_4 = Address(ADDRESS_4_PRIVATE_KEY.public_key.to_canonical_address())

w3 = Web3()
addr1 = Web3.toChecksumAddress(ADDRESS_1)
addr2 = Web3.toChecksumAddress(ADDRESS_2)
addr3 = Web3.toChecksumAddress(ADDRESS_3)
addr4 = Web3.toChecksumAddress(ADDRESS_4)

BLOCKCHAIN = Address(b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0a')
STAMINA =  Address(b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02')

byte_code = "0x608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ebb172a146101175780631556d8ac14610142578063158ef93e1461016d5780633900e4ec1461019c5780633ccfd60b146101f35780635be4f765146102225780637b929c271461031057806383cd9cc31461033f578063857184d11461039a5780638cd8db8a146103f1578063937aaef1146104325780639b4e735f14610489578063b69ad63b1461050c578063bcac973614610563578063c35082a9146105c8578063d1c0c0421461063f578063d898ae1c146106a4578063da95ebf7146106fb578063e1e158a514610760578063f340fa011461078b575b600080fd5b34801561012357600080fd5b5061012c6107d9565b6040518082815260200191505060405180910390f35b34801561014e57600080fd5b506101576107df565b6040518082815260200191505060405180910390f35b34801561017957600080fd5b506101826107e5565b604051808215151515815260200191505060405180910390f35b3480156101a857600080fd5b506101dd600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506107f8565b6040518082815260200191505060405180910390f35b3480156101ff57600080fd5b50610208610841565b604051808215151515815260200191505060405180910390f35b34801561022e57600080fd5b5061026d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610ba2565b60405180856fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018215151515815260200194505050505060405180910390f35b34801561031c57600080fd5b50610325610d59565b604051808215151515815260200191505060405180910390f35b34801561034b57600080fd5b50610380600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610d6c565b604051808215151515815260200191505060405180910390f35b3480156103a657600080fd5b506103db600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f3d565b6040518082815260200191505060405180910390f35b3480156103fd57600080fd5b50610430600480360381019080803590602001909291908035906020019092919080359060200190929190505050610f86565b005b34801561043e57600080fd5b50610473600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611015565b6040518082815260200191505060405180910390f35b34801561049557600080fd5b506104ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061105e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051857600080fd5b5061054d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506110c6565b6040518082815260200191505060405180910390f35b34801561056f57600080fd5b506105ae600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061110f565b604051808215151515815260200191505060405180910390f35b3480156105d457600080fd5b50610629600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061140e565b6040518082815260200191505060405180910390f35b34801561064b57600080fd5b5061068a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611495565b604051808215151515815260200191505060405180910390f35b3480156106b057600080fd5b506106e5600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061158d565b6040518082815260200191505060405180910390f35b34801561070757600080fd5b50610746600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115d9565b604051808215151515815260200191505060405180910390f35b34801561076c57600080fd5b50610775611a58565b6040518082815260200191505060405180910390f35b6107bf600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a5e565b604051808215151515815260200191505060405180910390f35b600b5481565b600a5481565b600860009054906101000a900460ff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002094506000858054905011151561089e57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935060008414801561091b57508460008154811015156108fa57fe5b906000526020600020906002020160010160149054906101000a900460ff16155b156109295760009250610957565b600084141561094f57600285805490501015151561094657600080fd5b60019250610956565b6001840192505b5b84805490508310151561096957600080fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156109b557fe5b906000526020600020906002020191508160010160149054906101000a900460ff161515156109e357600080fd5b43600b548360000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff160111151515610a2857600080fd5b8160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16905060018260010160146101000a81548160ff02191690831515021790555082600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610b04573d6000803e3d6000fd5b508160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f91fb9d98b786c57d74c099ccd2beca1739e9f6a81fb49001ca465c4b7591bbe28386604051808381526020018281526020019250505060405180910390a360019550505050505090565b600080600080610bb0611dd0565b610bb98761158d565b86101515610bc657600080fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002086815481101515610c1257fe5b9060005260206000209060020201608060405190810160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900460ff1615151515815250509050806000015194508060200151935080604001519250806060015191505092959194509250565b600c60009054906101000a900460ff1681565b600080600860009054906101000a900460ff161515610d8a57600080fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5884d7e3ec123de8e772bcf576c18dcdad75b056c4314f999ed966693419c692838233604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a16001915050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600860009054906101000a900460ff16151515610fa257600080fd5b600083111515610fb157600080fd5b600082111515610fc057600080fd5b600081111515610fcf57600080fd5b8060028302101515610fe057600080fd5b8260098190555081600a8190555080600b819055506001600860006101000a81548160ff021916908315150217905550505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600080600c60009054906101000a900460ff168061115c5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561116757600080fd5b43600a54600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156112d157600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555043600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555060019350611405565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491508185830111151561136557600080fd5b8482019050828111156113bb5782600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611400565b80600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600193505b50505092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080600c60009054906101000a900460ff16806114df5750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156114ea57600080fd5b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508083820310151561153c57600080fd5b828103600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600191505092915050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000806000806000806000600860009054906101000a900460ff1615156115ff57600080fd5b60008811151561160e57600080fd5b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549450600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935060008511151561172057600080fd5b8588870310151561173057600080fd5b8488860310151561174057600080fd5b878603600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550878503600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508784111561185c57878403600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118a2565b6000600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020925082805490509150828380548091906001016118fe9190611e35565b81548110151561190a57fe5b90600052602060002090600202019050878160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550438160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550888160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508873ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3aeb15af61588a39bcfafb19ed853140d195c2a924537afbf9a6d04348e76a698a438660405180848152602001838152602001828152602001935050505060405180910390a36001965050505050505092915050565b60095481565b600080600080600860009054906101000a900460ff161515611a7f57600080fd5b6009543410151515611a9057600080fd5b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549250600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082348401111515611ba357600080fd5b81348301111515611bb357600080fd5b80348201111515611bc357600080fd5b348301600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550348201600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550348101600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611d5f5743600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7346040518082815260200191505060405180910390a360019350505050919050565b60806040519081016040528060006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b815481835581811115611e6257600202816002028360005260206000209182019101611e619190611e67565b5b505050565b611f0491905b80821115611f0057600080820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556000820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160146101000a81549060ff021916905550600201611e6d565b5090565b905600a165627a7a7230582053a3e5add631aaab075816d3d2847d056fd6fe44d3207192ddec56ceee931e800029"

GENESIS_STATE = {
    BLOCKCHAIN: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    ADDRESS_1: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    ADDRESS_2: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    ADDRESS_3: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    ADDRESS_4: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : b"",
        "storage" : {}
    },
    STAMINA: {
        "balance" : 10**19,
        "nonce" : 0,
        "code" : decode_hex(byte_code),
        "storage" : {}
    }
}

klass = chains.base.MiningChain.configure(
    __name__='TestChain',
    vm_configuration=(
        (constants.GENESIS_BLOCK_NUMBER, ByzantiumVM),
    ))

chain = klass.from_genesis(MemoryDB(), GENESIS_PARAMS, GENESIS_STATE)

######### TX1 ###########################
# init
vm = chain.get_vm()

fdata = keccak("init(uint256,uint256,uin256)".encode())
fnsig = fdata[0:4]
adata = encode_single('(uint256,uint256,uint256)', [1000000000000000000,100,1000])
data = fnsig + adata

tx1 = new_transaction(
    vm=vm,
    private_key=ADDRESS_1_PRIVATE_KEY,
    from_=ADDRESS_1,
    to=STAMINA,
    amount=0,
    gas=2800000,
    data=data,
)

block, receipt, computation = chain.apply_transaction(tx1)

# We have to finalize the block first in order to be able read the
# attributes that are important for the PoW algorithm
block = chain.get_vm().finalize_block(chain.get_block())

# based on mining_hash, block number and difficulty we can perform
# the actual Proof of Work (PoW) mechanism to mine the correct
# nonce and mix_hash for this block
nonce, mix_hash = mine_pow_nonce(
    block.number,
    block.header.mining_hash,
    block.header.difficulty)

block = chain.mine_block(mix_hash=mix_hash, nonce=nonce)
vm = chain.get_vm()

print("BLOCK1 ADDRESS_1 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_1)))
print("BLOCK1 ADDRESS_2 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_2)))
print(computation.output)
print("-----------------------")

############ TX2 ##################
# setDelegatee
# vm = chain.get_vm()
#
# fdata = keccak("setDelegator(address)".encode())
# fnsig = fdata[0:4]
# adata = encode_single('address', addr2)
# data = fnsig + adata
#
# nonce = vm.state.account_db.get_nonce(ADDRESS_3)
# tx2 = vm.create_unsigned_transaction(
#     nonce=nonce,
#     gas_price=100,
#     gas=100000,
#     to=STAMINA,
#     value=0,
#     data=data,
# )
#
# signed_tx2 = tx2.as_signed_transaction(ADDRESS_3_PRIVATE_KEY)
#
# _, _, computation = chain.apply_transaction(signed_tx2)
#
# # We have to finalize the block first in order to be able read the
# # attributes that are important for the PoW algorithm
# block = chain.get_vm().finalize_block(chain.get_block())
#
# # based on mining_hash, block number and difficulty we can perform
# # the actual Proof of Work (PoW) mechanism to mine the correct
# # nonce and mix_hash for this block
# nonce, mix_hash = mine_pow_nonce(
#     block.number,
#     block.header.mining_hash,
#     block.header.difficulty)
#
# block = chain.mine_block(mix_hash=mix_hash, nonce=nonce)
#
# vm = chain.get_vm()
#
# print("BLOCK2 ADDRESS_1 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_1)))
# print("BLOCK2 ADDRESS_2 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_2)))
# print("BLOCK2 ADDRESS_3 BALANCE : {}".format(vm.state.account_db.get_balance(ADDRESS_3)))
# print("-----------------------")
#
# ############ getDelegate ##################
#
# vm = chain.get_vm()
#
# delegate = getDelegate(vm.state, ADDRESS_2, STAMINA, ADDRESS_3)
#
# print(delegate)
# print(encode_hex(ADDRESS_3))
# print("-----------------------")
